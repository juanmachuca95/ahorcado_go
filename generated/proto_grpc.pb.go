// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AhorcadoClient is the client API for Ahorcado service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AhorcadoClient interface {
	Ahorcado(ctx context.Context, opts ...grpc.CallOption) (Ahorcado_AhorcadoClient, error)
}

type ahorcadoClient struct {
	cc grpc.ClientConnInterface
}

func NewAhorcadoClient(cc grpc.ClientConnInterface) AhorcadoClient {
	return &ahorcadoClient{cc}
}

func (c *ahorcadoClient) Ahorcado(ctx context.Context, opts ...grpc.CallOption) (Ahorcado_AhorcadoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ahorcado_ServiceDesc.Streams[0], "/Ahorcado/Ahorcado", opts...)
	if err != nil {
		return nil, err
	}
	x := &ahorcadoAhorcadoClient{stream}
	return x, nil
}

type Ahorcado_AhorcadoClient interface {
	Send(*Word) error
	Recv() (*Game, error)
	grpc.ClientStream
}

type ahorcadoAhorcadoClient struct {
	grpc.ClientStream
}

func (x *ahorcadoAhorcadoClient) Send(m *Word) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ahorcadoAhorcadoClient) Recv() (*Game, error) {
	m := new(Game)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AhorcadoServer is the server API for Ahorcado service.
// All implementations must embed UnimplementedAhorcadoServer
// for forward compatibility
type AhorcadoServer interface {
	Ahorcado(Ahorcado_AhorcadoServer) error
	mustEmbedUnimplementedAhorcadoServer()
}

// UnimplementedAhorcadoServer must be embedded to have forward compatible implementations.
type UnimplementedAhorcadoServer struct {
}

func (UnimplementedAhorcadoServer) Ahorcado(Ahorcado_AhorcadoServer) error {
	return status.Errorf(codes.Unimplemented, "method Ahorcado not implemented")
}
func (UnimplementedAhorcadoServer) mustEmbedUnimplementedAhorcadoServer() {}

// UnsafeAhorcadoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AhorcadoServer will
// result in compilation errors.
type UnsafeAhorcadoServer interface {
	mustEmbedUnimplementedAhorcadoServer()
}

func RegisterAhorcadoServer(s grpc.ServiceRegistrar, srv AhorcadoServer) {
	s.RegisterService(&Ahorcado_ServiceDesc, srv)
}

func _Ahorcado_Ahorcado_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AhorcadoServer).Ahorcado(&ahorcadoAhorcadoServer{stream})
}

type Ahorcado_AhorcadoServer interface {
	Send(*Game) error
	Recv() (*Word, error)
	grpc.ServerStream
}

type ahorcadoAhorcadoServer struct {
	grpc.ServerStream
}

func (x *ahorcadoAhorcadoServer) Send(m *Game) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ahorcadoAhorcadoServer) Recv() (*Word, error) {
	m := new(Word)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Ahorcado_ServiceDesc is the grpc.ServiceDesc for Ahorcado service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ahorcado_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ahorcado",
	HandlerType: (*AhorcadoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ahorcado",
			Handler:       _Ahorcado_Ahorcado_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto.proto",
}
